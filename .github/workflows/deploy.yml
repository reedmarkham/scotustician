name: Deploy Scotustician Infrastructure

on:
  push:
    branches: [main]
    paths-ignore:
      - 'README.md'
      - '*.md'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'
  pull_request:
    branches: [main]
    paths-ignore:
      - 'README.md'
      - '*.md'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'

jobs:
  plan:
    runs-on: ubuntu-latest
    outputs:
      deploy_shared: ${{ steps.filter.outputs.shared }}
      deploy_ingest: ${{ steps.filter.outputs.ingest }}
      deploy_transformers: ${{ steps.filter.outputs.transformers }}
      deploy_clustering: ${{ steps.filter.outputs.clustering }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Filter changed paths
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            shared:
              - 'infrastructure/**'
              - '.github/workflows/**'
            ingest:
              - 'infrastructure/**'
              - 'services/ingest/*'
              - 'services/ingest/**/*'
            transformers:
              - 'infrastructure/**'
              - 'services/transformers/*'
              - 'services/transformers/**/*'
              - '.github/workflows/**'
            clustering:
              - 'infrastructure/**'
              - 'services/case-clustering/*'
              - 'services/case-clustering/**/*'
              - '.github/workflows/**'

  deploy_shared:
    needs: plan
    if: needs.plan.outputs.deploy_shared == 'true'
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TOOLKIT_STACK: CDKToolkit-scotustician
      BOOTSTRAP_QUALIFIER: sctstcn
    steps:
      - uses: actions/checkout@v3

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: actions/setup-node@v3
        with:
          node-version: '20'

      - run: cd infrastructure && npm ci

      - name: Check and recover from rollback state
        run: |
          STACK_STATUS=$(aws cloudformation describe-stacks \
            --stack-name ScotusticianSharedStack \
            --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "DOES_NOT_EXIST")
          
          echo "Current stack status: $STACK_STATUS"
          
          if [[ "$STACK_STATUS" == "UPDATE_ROLLBACK_COMPLETE" ]]; then
            echo "Stack in UPDATE_ROLLBACK_COMPLETE state, continuing rollback..."
            aws cloudformation continue-update-rollback \
              --stack-name ScotusticianSharedStack
            
            echo "Waiting for rollback to complete..."
            aws cloudformation wait stack-update-complete \
              --stack-name ScotusticianSharedStack || true
          elif [[ "$STACK_STATUS" == "ROLLBACK_COMPLETE" ]]; then
            echo "WARNING: Stack in ROLLBACK_COMPLETE state - manual deletion required"
            echo "To fix: Delete the stack manually and re-run this workflow"
            exit 1
          fi

      - name: Check GPU quota
        id: gpu_check
        run: |
          echo "gpu_quota=0" >> $GITHUB_OUTPUT
          output=$(aws service-quotas get-service-quota \
            --service-code ec2 \
            --quota-code L-417A2B38 \
            --query 'Quota.Value' --output text 2>&1) || true
          if [[ "$output" =~ ^[0-9]+([.][0-9]+)?$ ]]; then
            echo "gpu_quota=$output" >> $GITHUB_OUTPUT
          fi

      - name: Deploy shared stack
        run: |
          cd infrastructure
          if (( $(echo "${{ steps.gpu_check.outputs.gpu_quota }} >= 1" | bc -l) )); then
            CONTEXT="--context useGpu=true"
            echo "Deploying with GPU context"
          else
            CONTEXT="--context useGpu=false"
            echo "Deploying with CPU fallback context"
          fi

          npx cdk deploy ScotusticianSharedStack \
            --context bootstrapQualifier=$BOOTSTRAP_QUALIFIER \
            --toolkit-stack-name $TOOLKIT_STACK \
            $CONTEXT \
            --outputs-file cdk-outputs-shared.json \
            --require-approval never \
            --method direct

      - name: Upload shared outputs
        uses: actions/upload-artifact@v4
        with:
          name: cdk-outputs-shared
          path: infrastructure/cdk-outputs-shared.json

  deploy_ingest:
    needs: [plan, deploy_shared]
    if: |
      always() && 
      needs.plan.outputs.deploy_ingest == 'true' && 
      (needs.deploy_shared.result == 'success' || needs.deploy_shared.result == 'skipped')
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TOOLKIT_STACK: CDKToolkit-scotustician
      BOOTSTRAP_QUALIFIER: sctstcn
    steps:
      - uses: actions/checkout@v3

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: actions/setup-node@v3
        with:
          node-version: '20'

      - run: cd infrastructure && npm ci

      - name: Check and recover from rollback state
        run: |
          STACK_STATUS=$(aws cloudformation describe-stacks \
            --stack-name ScotusticianIngestStack \
            --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "DOES_NOT_EXIST")
          
          echo "Current stack status: $STACK_STATUS"
          
          if [[ "$STACK_STATUS" == "UPDATE_ROLLBACK_COMPLETE" ]]; then
            echo "Stack in UPDATE_ROLLBACK_COMPLETE state, continuing rollback..."
            aws cloudformation continue-update-rollback \
              --stack-name ScotusticianIngestStack
            
            echo "Waiting for rollback to complete..."
            aws cloudformation wait stack-update-complete \
              --stack-name ScotusticianIngestStack || true
          elif [[ "$STACK_STATUS" == "ROLLBACK_COMPLETE" ]]; then
            echo "WARNING: Stack in ROLLBACK_COMPLETE state - manual deletion required"
            echo "To fix: Delete the stack manually and re-run this workflow"
            exit 1
          fi

      - name: Download shared outputs
        if: needs.deploy_shared.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: cdk-outputs-shared
          path: infrastructure
        continue-on-error: true

      - run: |
          cd infrastructure
          npx cdk deploy ScotusticianIngestStack \
            --context bootstrapQualifier=$BOOTSTRAP_QUALIFIER \
            --toolkit-stack-name $TOOLKIT_STACK \
            --outputs-file cdk-outputs-ingest.json \
            --require-approval never \
            --method direct

      - name: Upload ingest outputs
        uses: actions/upload-artifact@v4
        with:
          name: cdk-outputs-ingest
          path: infrastructure/cdk-outputs-ingest.json

  deploy_transformers:
    needs: [plan, deploy_shared]
    if: |
      always() && 
      needs.plan.outputs.deploy_transformers == 'true' && 
      (needs.deploy_shared.result == 'success' || needs.deploy_shared.result == 'skipped')
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TOOLKIT_STACK: CDKToolkit-scotustician
      BOOTSTRAP_QUALIFIER: sctstcn
    steps:
      - uses: actions/checkout@v3

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: actions/setup-node@v3
        with:
          node-version: '20'

      - run: cd infrastructure && npm ci

      - name: Check and recover from rollback state
        run: |
          STACK_STATUS=$(aws cloudformation describe-stacks \
            --stack-name ScotusticianTransformersStack \
            --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "DOES_NOT_EXIST")
          
          echo "Current stack status: $STACK_STATUS"
          
          if [[ "$STACK_STATUS" == "UPDATE_ROLLBACK_COMPLETE" ]]; then
            echo "Stack in UPDATE_ROLLBACK_COMPLETE state, continuing rollback..."
            aws cloudformation continue-update-rollback \
              --stack-name ScotusticianTransformersStack
            
            echo "Waiting for rollback to complete..."
            aws cloudformation wait stack-update-complete \
              --stack-name ScotusticianTransformersStack || true
          elif [[ "$STACK_STATUS" == "ROLLBACK_COMPLETE" ]]; then
            echo "WARNING: Stack in ROLLBACK_COMPLETE state - manual deletion required"
            echo "To fix: Delete the stack manually and re-run this workflow"
            exit 1
          fi

      - name: Download shared outputs
        if: needs.deploy_shared.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: cdk-outputs-shared
          path: infrastructure
        continue-on-error: true

      - name: Check GPU quota
        id: gpu_check
        run: |
          echo "gpu_quota=0" >> $GITHUB_OUTPUT
          output=$(aws service-quotas get-service-quota \
            --service-code ec2 \
            --quota-code L-DB2E81BA \
            --query 'Quota.Value' --output text 2>&1) || true
          if [[ "$output" =~ ^[0-9]+([.][0-9]+)?$ ]]; then
            echo "gpu_quota=$output" >> $GITHUB_OUTPUT
          fi

      - name: Deploy transformers stack
        run: |
          cd infrastructure
          if (( $(echo "${{ steps.gpu_check.outputs.gpu_quota }} >= 1" | bc -l) )); then
            CONTEXT="--context useGpu=true"
            echo "Deploying with GPU context"
          else
            CONTEXT="--context useGpu=false"
            echo "Deploying with CPU fallback context"
          fi

          npx cdk deploy ScotusticianTransformersStack \
            --context bootstrapQualifier=$BOOTSTRAP_QUALIFIER \
            --toolkit-stack-name $TOOLKIT_STACK \
            $CONTEXT \
            --outputs-file cdk-outputs-transformers.json \
            --require-approval never \
            --method direct

      - name: Upload transformers outputs
        uses: actions/upload-artifact@v4
        with:
          name: cdk-outputs-transformers
          path: infrastructure/cdk-outputs-transformers.json

  deploy_clustering:
    needs: [plan, deploy_shared]
    if: |
      always() && 
      needs.plan.outputs.deploy_clustering == 'true' && 
      (needs.deploy_shared.result == 'success' || needs.deploy_shared.result == 'skipped')
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TOOLKIT_STACK: CDKToolkit-scotustician
      BOOTSTRAP_QUALIFIER: sctstcn
    steps:
      - uses: actions/checkout@v3

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: actions/setup-node@v3
        with:
          node-version: '20'

      - run: cd infrastructure && npm ci

      - name: Check and recover from rollback state
        run: |
          STACK_STATUS=$(aws cloudformation describe-stacks \
            --stack-name ScotusticianClusteringStack \
            --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "DOES_NOT_EXIST")
          
          echo "Current stack status: $STACK_STATUS"
          
          if [[ "$STACK_STATUS" == "UPDATE_ROLLBACK_COMPLETE" ]]; then
            echo "Stack in UPDATE_ROLLBACK_COMPLETE state, continuing rollback..."
            aws cloudformation continue-update-rollback \
              --stack-name ScotusticianClusteringStack
            
            echo "Waiting for rollback to complete..."
            aws cloudformation wait stack-update-complete \
              --stack-name ScotusticianClusteringStack || true
          elif [[ "$STACK_STATUS" == "ROLLBACK_COMPLETE" ]]; then
            echo "WARNING: Stack in ROLLBACK_COMPLETE state - manual deletion required"
            echo "To fix: Delete the stack manually and re-run this workflow"
            exit 1
          fi

      - name: Download shared outputs
        if: needs.deploy_shared.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: cdk-outputs-shared
          path: infrastructure
        continue-on-error: true

      - name: Deploy clustering stack
        run: |
          cd infrastructure
          npx cdk deploy ScotusticianClusteringStack \
            --context bootstrapQualifier=$BOOTSTRAP_QUALIFIER \
            --toolkit-stack-name $TOOLKIT_STACK \
            --outputs-file cdk-outputs-clustering.json \
            --require-approval never \
            --method direct

      - name: Upload clustering outputs
        uses: actions/upload-artifact@v4
        with:
          name: cdk-outputs-clustering
          path: infrastructure/cdk-outputs-clustering.json

